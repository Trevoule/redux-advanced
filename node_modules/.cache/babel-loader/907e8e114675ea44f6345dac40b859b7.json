{"ast":null,"code":"import { createSlice } from \"@reduxjs/toolkit\";\nimport { uiActions } from \"./ui-slice\";\nconst initialCartState = {\n  items: [],\n  totalQuantity: 0,\n  cartState: 0\n};\nconst cartSlice = createSlice({\n  name: \"cart\",\n  initialState: initialCartState,\n  reducers: {\n    addItemToCart(state, action) {\n      const payloadItem = action.payload;\n      const existingItem = state.items.find(item => item.id === payloadItem.id);\n      const existingItemIndex = state.items.findIndex(item => item.id === payloadItem.id);\n      state.totalQuantity++;\n\n      if (!existingItem) {\n        state.items.push({\n          id: payloadItem.id,\n          price: payloadItem.price,\n          quantity: 1,\n          totalPrice: payloadItem.price,\n          title: payloadItem.title\n        });\n      } else {\n        state.items[existingItemIndex].quantity++;\n        state.items[existingItemIndex].totalPrice = existingItem.totalPrice + payloadItem.price;\n      }\n    },\n\n    removeItemFromCart(state, action) {\n      const id = action.payload;\n      const existingItem = state.items.find(item => item.id === id);\n      state.totalQuantity--;\n\n      if (existingItem.quantity === 1) {\n        state.items = state.items.filter(item => item.id !== id);\n      } else {\n        existingItem.quantity--;\n        existingItem.totalPrice = existingItem.totalPrice - existingItem.price;\n      }\n    }\n\n  }\n}); // action thunk\n// not a reducer\n\nexport const sendCartData = cart => {\n  return async dispatch => {\n    dispatch(uiActions.showNotification({\n      status: \"pending\",\n      title: \"Sending...\",\n      message: \"Sending Cart data\"\n    }));\n\n    const sendRequest = async () => {\n      const response = await fetch(\"https://react-fetch-movies-12638-default-rtdb.firebasio.com/cart.json\", {\n        method: \"PUT\",\n        body: JSON.stringify(cart)\n      });\n\n      if (!response.ok) {\n        dispatch(uiActions.showNotification({\n          status: \"error\",\n          title: \"Error\",\n          message: \"Sending data failed!\"\n        }));\n      }\n    };\n\n    try {\n      await sendRequest();\n      dispatch(uiActions.showNotification({\n        status: \"success\",\n        title: \"Success\",\n        message: \"Sent cart data successfully!\"\n      }));\n    } catch (error) {\n      console.log(error);\n      dispatch(uiActions.showNotification({\n        status: \"error\",\n        title: \"Error\",\n        message: \"Sending data failed!\"\n      }));\n    }\n  };\n};\nexport const cartActions = cartSlice.actions;\nexport default cartSlice;","map":{"version":3,"sources":["/home/vladislav/Desktop/Work - Backup/React/redux-advanced/src/components/store/cart-slice.js"],"names":["createSlice","uiActions","initialCartState","items","totalQuantity","cartState","cartSlice","name","initialState","reducers","addItemToCart","state","action","payloadItem","payload","existingItem","find","item","id","existingItemIndex","findIndex","push","price","quantity","totalPrice","title","removeItemFromCart","filter","sendCartData","cart","dispatch","showNotification","status","message","sendRequest","response","fetch","method","body","JSON","stringify","ok","error","console","log","cartActions","actions"],"mappings":"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","sourcesContent":["import { createSlice } from \"@reduxjs/toolkit\";\n\nimport { uiActions } from \"./ui-slice\";\n\nconst initialCartState = {\n  items: [],\n  totalQuantity: 0,\n  cartState: 0,\n};\n\nconst cartSlice = createSlice({\n  name: \"cart\",\n  initialState: initialCartState,\n  reducers: {\n    addItemToCart(state, action) {\n      const payloadItem = action.payload;\n      const existingItem = state.items.find(\n        (item) => item.id === payloadItem.id\n      );\n      const existingItemIndex = state.items.findIndex(\n        (item) => item.id === payloadItem.id\n      );\n\n      state.totalQuantity++;\n\n      if (!existingItem) {\n        state.items.push({\n          id: payloadItem.id,\n          price: payloadItem.price,\n          quantity: 1,\n          totalPrice: payloadItem.price,\n          title: payloadItem.title,\n        });\n      } else {\n        state.items[existingItemIndex].quantity++;\n        state.items[existingItemIndex].totalPrice =\n          existingItem.totalPrice + payloadItem.price;\n      }\n    },\n\n    removeItemFromCart(state, action) {\n      const id = action.payload;\n      const existingItem = state.items.find((item) => item.id === id);\n      state.totalQuantity--;\n      if (existingItem.quantity === 1) {\n        state.items = state.items.filter((item) => item.id !== id);\n      } else {\n        existingItem.quantity--;\n        existingItem.totalPrice = existingItem.totalPrice - existingItem.price;\n      }\n    },\n  },\n});\n\n// action thunk\n// not a reducer\nexport const sendCartData = (cart) => {\n  return async (dispatch) => {\n    dispatch(\n      uiActions.showNotification({\n        status: \"pending\",\n        title: \"Sending...\",\n        message: \"Sending Cart data\",\n      })\n    );\n\n    const sendRequest = async () => {\n      const response = await fetch(\n        \"https://react-fetch-movies-12638-default-rtdb.firebasio.com/cart.json\",\n        {\n          method: \"PUT\",\n          body: JSON.stringify(cart),\n        }\n      );\n\n      if (!response.ok) {\n        dispatch(\n          uiActions.showNotification({\n            status: \"error\",\n            title: \"Error\",\n            message: \"Sending data failed!\",\n          })\n        );\n      }\n    };\n\n    try {\n      await sendRequest();\n\n      dispatch(\n        uiActions.showNotification({\n          status: \"success\",\n          title: \"Success\",\n          message: \"Sent cart data successfully!\",\n        })\n      );\n    } catch (error) {\n      console.log(error);\n      dispatch(\n        uiActions.showNotification({\n          status: \"error\",\n          title: \"Error\",\n          message: \"Sending data failed!\",\n        })\n      );\n    }\n  };\n};\n\nexport const cartActions = cartSlice.actions;\n\nexport default cartSlice;\n"]},"metadata":{},"sourceType":"module"}